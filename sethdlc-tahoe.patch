--- sethdlc-1.18/sethdlc.c.orig	2005-03-31 20:06:07.000000000 +0200
+++ sethdlc-1.18/sethdlc.c	2007-05-27 00:20:52.332205070 +0200
@@ -2,6 +2,7 @@
  * sethdlc.c
  *
  * Copyright (C) 1999 - 2004 Krzysztof Halasa <khc@pm.waw.pl>
+ * Tahoe support based on patch by Piotr Kaczmarczyk <piotr@tahoe.pl>, 2003.
  *
  * This program is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License as published by
@@ -137,6 +138,81 @@
 	return 0;
 }
 
+static void check_slot(char slot)
+{
+	if ((slot < 1) || (slot > 32)) {
+		error("Slots have to be between 1 and 32\n");
+	}
+}
+
+static unsigned int get_slot_map()
+{
+	char	*cp, *c, *c2, slot, slot_end;
+	unsigned int slots;
+	
+	if (argc < 1) {
+		error("Required parameter missing\n");
+	}
+	
+	if (!strcmp("all", argv[0])) {
+		argc--;
+		argv++;
+		return 0xffffffff;
+	}
+
+	cp = c = argv[0];
+	slots = 0;
+	while (1) {
+		char	out;
+				
+		out = 0;
+		switch (*cp) {
+			case ',':
+			case 0:
+				if (*cp == 0) out = 1;	// eol
+				*cp++ = 0;
+				slot = atoi(c);
+				check_slot(slot);
+				slots |= 1 << (slot - 1);
+				c = cp;
+				break;
+			case '-':
+				/* range */
+				*cp++ = 0;
+				c2 = cp;
+				while (1) {
+					if ((*cp == ',') || (*cp == 0)) {
+						if (*cp == 0) out = 1;	// eol
+						*cp++ = 0;
+						slot = atoi(c);
+						slot_end = atoi(c2);
+						check_slot(slot);
+						check_slot(slot_end);
+						if (slot_end < slot) {
+							error("The ending slot should be higher than the starting one\n");
+						}
+						do {
+							slots |= 1 << (slot - 1);
+							slot++;
+						} while (slot <= slot_end);
+						c = cp;
+						break;
+					}
+					cp++;
+				}
+				break;
+			default:
+				cp++;
+		}
+		if (out) break;
+	}
+	argc--;
+	argv++;
+	if (slots & 1) {
+		error("Slot 1 is reserved - use 'slotmap all' to enable unframed mode\n");
+	}
+	return slots;
+}
 
 static parsertab ifaces[] = {{ "v35", IF_IFACE_V35 },
 			     { "v24", IF_IFACE_V24 },
@@ -186,40 +262,94 @@
 			  { "ccitt", LMI_CCITT },
 			  { NULL, 0 }};
 
+typedef struct {
+	unsigned int clock_rate; /* bits per second */
+	unsigned int clock_type; /* internal, external, TX-internal etc. */
+	unsigned short loopback;
+	unsigned int slot_map;
+	unsigned short crc4;
+	unsigned short egl;
+} tahoe_settings; /* superset of t1_settings, with tahoe-specific fields added */
 
 static void set_iface(void)
 {
 	int orig_argc = argc;
-	te1_settings te1;
+	int type_set = 0, clock_type_set = 0, clock_rate_set = 0, loopback_set = 0, tahoe = 0;
+	tahoe_settings te1;
 
 	memset(&te1, 0, sizeof(te1));
-	req.ifr_settings.type = IF_IFACE_SYNC_SERIAL;
+	req.ifr_settings.type = IF_GET_IFACE;
+	req.ifr_settings.ifs_ifsu.te1 = &te1;
+	req.ifr_settings.size = sizeof(tahoe_settings);
+	if (ioctl(sock, SIOCWANDEV, &req)) {
+		if (errno != EINVAL)
+			error("Unable to get interface information: %s\n", strerror(errno));
+	}
 
 	while (argc > 0) {
-		if (req.ifr_settings.type == IF_IFACE_SYNC_SERIAL)
-			if (!checktab(ifaces, &req.ifr_settings.type))
+		if (!type_set)
+			if (!checktab(ifaces, &req.ifr_settings.type)) {
+				type_set = 1;
 				continue;
+			}
 
-		if (!te1.clock_type)
+		if (!clock_type_set)
 			if (!checkkey("clock")) {
+				clock_type_set = 1;
 				if (!checktab(clocks, &te1.clock_type))
 					continue;
 				error("Invalid clock type\n");
 			}
 
-		if (!te1.clock_rate &&
+		if (!clock_rate_set &&
 		    (te1.clock_type == CLOCK_INT ||
 		     te1.clock_type == CLOCK_TXINT))
-			if (!match("rate", &te1.clock_rate, 1, 0xFFFFFFFF))
+			if (!match("rate", &te1.clock_rate, 1, 0xFFFFFFFF)) {
+				clock_rate_set = 1;
 				continue;
-		if (!te1.loopback) {
+			}
+		if (!loopback_set) {
 			if (!checkkey("loopback") ||
 			    !checkkey("lb")) {
+				loopback_set = 1;
 				te1.loopback = 1;
 				continue;
 			}
 		}
 		/* slotmap goes here */
+		if (!checkkey("slotmap")) {
+			te1.slot_map = get_slot_map();
+			if (!te1.slot_map) return;
+			continue;
+		}
+
+		if (!checkkey("short")) {
+			tahoe = 1;
+			te1.egl = 0;
+			continue;
+		}
+
+		if (!checkkey("long")) {
+			tahoe = 1;
+			te1.egl = 1;
+			continue;
+		}
+
+		if (!checkkey("crc4")) {
+			if (!checkkey("on")) {
+				tahoe = 1;
+				te1.crc4 = 1;
+				continue;
+			}
+			if (!checkkey("off")) {
+				tahoe = 1;
+				te1.crc4 = 0;
+				continue;
+			}
+		}
+ 
+		if(!checkkey("tahoe"))
+			tahoe = 1; /* just use bigger struct with default values */
 
 		if (orig_argc == argc)
 			return;	/* not an iface definition */
@@ -233,6 +363,9 @@
 
 	/* FIXME stupid hack, will remove it later */
 	req.ifr_settings.ifs_ifsu.te1 = &te1;
+	if (tahoe) {
+		req.ifr_settings.size = sizeof(tahoe_settings);
+	} else
 	if (req.ifr_settings.type == IF_IFACE_E1 ||
 	    req.ifr_settings.type == IF_IFACE_T1)
 		req.ifr_settings.size = sizeof(te1_settings);
@@ -484,11 +617,66 @@
 
 
 
+static void display_slots(unsigned int slots, char *tmp, char *bin, unsigned char *n)
+{
+	char tmp2[10];
+	unsigned char	i, zakr = 255, zakr_begin = 0, comma = 0, slot;
+
+	if (slots == 0xffffffff) {
+		sprintf(tmp, "all");
+		sprintf(bin, "11111111111111111111111111111111");
+		*n = 32;
+		return;
+	}
+	tmp[0] = 0;
+	for (i=0; i<32; i++) {
+		slot = ((slots & (1 << i)) != 0);
+		if (slot) {
+			if (zakr == 255) {
+				zakr = i;
+				zakr_begin = i;
+				if (comma) strcat(tmp,",");
+				sprintf(tmp2, "%d", i+1);
+				strcat(tmp, tmp2);
+				comma = 1;
+			} else {
+				if (zakr != i-1) {
+					if (zakr == zakr_begin)
+						/* one-element range */
+						sprintf(tmp2, ",%d", i+1);
+					else
+						sprintf(tmp2, "-%d,%d", zakr+1, i+1);
+					strcat(tmp, tmp2);
+					zakr_begin = i;
+					comma = 1;
+				}
+				zakr = i;
+			}
+		}
+		if (i == 31) {	/* the last slot */
+			if (zakr != 255) {
+				tmp2[0] = 0;
+				/* end started range */
+				if (slot && (zakr_begin != 31))
+					sprintf(tmp2, "-32");
+				else
+					if (zakr != zakr_begin)
+						sprintf(tmp2, "-%d", zakr+1);
+				strcat(tmp, tmp2);
+			}
+		}
+		if (n) (*n) += slot;
+		if (bin) bin[i] = '0' + slot;
+		if (bin) bin[0] = 's';	// Slot 1 - sync
+		if (bin) bin[32] = 0;
+	}
+}
+ 
 static void show_port(void)
 {
 	const char *s;
 	char buffer[128];
-	const te1_settings *te1 = (void*)buffer;
+	const tahoe_settings *te1 = (void*)buffer;
 	const raw_hdlc_proto *raw = (void*)buffer;
 	const cisco_proto *cisco = (void*)buffer;
 	const fr_proto *fr = (void*)buffer;
@@ -538,12 +726,15 @@
 
 		if (req.ifr_settings.type == IF_IFACE_E1 ||
 		    req.ifr_settings.type == IF_IFACE_T1) {
-			unsigned int u;
+			unsigned char n;
+			char tmp[128], bin[128];
 			printf(" slotmap ");
-			for (u = te1->slot_map; u != 0; u /= 2)
-				printf("%u", u % 2);
+			n = 0;
+			display_slots(te1->slot_map, tmp, bin, &n);
+			printf("%s (%s, %d kb/s)\n", tmp, bin, n*64);
+			printf("crc4 %s\n", te1->crc4 ? "on" : "off");
+			printf("egl %s\n", te1->egl ? "long" : "short");
 		}
-		printf("\n");
 	} while(0);
 
 	/* Get and print protocol settings */
@@ -639,7 +830,7 @@
 		"Copyright (C) 2000 - 2005 Krzysztof Halasa <khc@pm.waw.pl>\n"
 		"\n"
 		"Usage: sethdlc INTERFACE [PHYSICAL] [clock CLOCK] [LOOPBACK] "
-		"[slotmap SLOTMAP]\n"
+		"[slotmap SLOTMAP] [tahoe] [crc4 on | off] [short | long]\n"
 		"       sethdlc INTERFACE [PROTOCOL]\n"
 		"       sethdlc INTERFACE create | delete"
 #ifdef IF_PROTO_FR_ETH_PVC
